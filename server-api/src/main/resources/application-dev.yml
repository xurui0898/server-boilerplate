server:
  context-path: /
  port: 9010

logging:
  path: /tmp/logs

spring:
  redis:
    host: 127.0.0.1 # Redis服务器地址
    database: 0 # Redis数据库索引（默认为0）
    port: 6389 # Redis服务器连接端口
    password: # Redis服务器连接密码（默认为空）

  datasource:
    # 动态数据源配置
    dynamic:
      datasource:
        master:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/uyes_ptj?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true
          username: root
          password: root
      # 指定默认数据源名称
      primary: master

  shardingsphere:
    # 定义数据源
    datasource:
      names: ds0,ds1,ds2,ds3
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/ds_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true
        username: root
        password: root
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/ds_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true
        username: root
        password: root
      ds2:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/ds_2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true
        username: root
        password: root
      ds3:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/ds_3?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true
        username: root
        password: root
    props:
      # 日志显示SQL
      sql.show: true
    sharding:
      tables:
        # 逻辑表-订单表基础表
        t_ent_order:
          # 真实表
          actualDataNodes: ds$->{0..3}.t_ent_order_$->{0..3}
          # 分库策略
          databaseStrategy:
            complex:
              sharding-columns: id
              algorithm-class-name: com.boilerplate.server.sharding.OrderShardingAlgorithm
          # 分表策略
          tableStrategy:
            complex:
              sharding-columns: id
              algorithm-class-name: com.boilerplate.server.sharding.OrderShardingAlgorithm

        # 逻辑表-订单条目表
        t_ent_order_item:
          # 真实表
          actualDataNodes: ds$->{0..3}.t_ent_order_item_$->{0..7}
          # 分库策略
          databaseStrategy:
            complex:
              sharding-columns: id,ent_id
              algorithm-class-name: com.boilerplate.server.sharding.HashSlotAlgorithm
          # 分表策略
          tableStrategy:
            complex:
              sharding-columns: id,ent_id
              algorithm-class-name: com.boilerplate.server.sharding.HashSlotAlgorithm

        # 逻辑表-订单详情表
        t_ent_order_detail:
          # 真实表
          actualDataNodes: ds$->{0..3}.t_ent_order_detail
          # 分库策略
          databaseStrategy:
            complex:
              sharding-columns: id,ent_id
              algorithm-class-name: com.boilerplate.server.sharding.HashSlotAlgorithm
          # 分表策略
          tableStrategy:
            complex:
              sharding-columns: id,ent_id
              algorithm-class-name: com.boilerplate.server.sharding.HashSlotAlgorithm
      bindingTables:
        - t_ent_order,t_ent_order_detail